{"version":3,"sources":["images/beth.png","images/birdperson.png","images/evilmorty.png","images/gianthead.png","images/goldenford.png","images/jerry.png","images/jessica.png","images/meeseeks.png","images/morty.png","images/mr.png","images/rick.png","images/summer.png","components/Navbar/Navbar.js","components/Character/Character.js","components/Container/Container.js","components/Banner/Banner.js","images.js","components/Game.js","index.js"],"names":["module","exports","Navbar","props","className","navMsgColor","navMessage","score","highScore","Character","onClick","e","clickEvent","target","src","name","alt","Container","shake","characters","map","a","i","key","Banner","class","images","beth","birdperson","evilmorty","gianthead","goldenford","jerry","jessica","meeseeks","morty","mr","rick","summer","Game","state","allCharacters","shuffleArray","wasClicked","checkClicked","bind","newArr","slice","shuffleArr","length","push","splice","Math","floor","random","clickedElem","prevState","this","shuffled","includes","setState","setTimeout","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.909ece40.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/beth.4d5e65a0.png\";","module.exports = __webpack_public_path__ + \"static/media/birdperson.612ba8d4.png\";","module.exports = __webpack_public_path__ + \"static/media/evilmorty.0657e1f4.png\";","module.exports = __webpack_public_path__ + \"static/media/gianthead.978b3847.png\";","module.exports = __webpack_public_path__ + \"static/media/goldenford.3774b39d.png\";","module.exports = __webpack_public_path__ + \"static/media/jerry.af8e8a84.png\";","module.exports = __webpack_public_path__ + \"static/media/jessica.a9644830.png\";","module.exports = __webpack_public_path__ + \"static/media/meeseeks.9667b7ee.png\";","module.exports = __webpack_public_path__ + \"static/media/morty.244deeda.png\";","module.exports = __webpack_public_path__ + \"static/media/mr.d61b2d5b.png\";","module.exports = __webpack_public_path__ + \"static/media/rick.06b65841.png\";","module.exports = __webpack_public_path__ + \"static/media/summer.afdbb7bf.png\";","import React from 'react';\nimport './Navbar.css';\n\nconst Navbar = props => (\n  <div className=\"navbar \">\n    <div>Clicky Game</div>\n    <div className={props.navMsgColor}>{props.navMessage}</div>\n    <div>\n      Score: {props.score} <span className=\"pipe\">|</span> High Score: {props.highScore}\n    </div>\n  </div>\n);\n\nexport default Navbar;","import React from 'react';\nimport './Character.css';\n\nconst Character = props => (\n    <div className=\"card\" onClick={e => props.clickEvent(e.target.src)}>\n        <img className=\"card-img-top card-height\" src={props.name} alt=\"\"/>\n        </div>\n);\n\nexport default Character;","import React from 'react';\nimport './Container.css';\nimport Character from '../Character';\n\n// main container for each Character component\n// loops through each index in props.characters, which contains an array of character images\n// to create a new Character component for each image\n// attaches the passed down clickEvent function to each Character component\nconst Container = props => (\n  // loops through\n  <div\n    className={\n      props.shake\n        ? 'container d-flex flex-wrap justify-content-center shake'\n        : 'container d-flex flex-wrap justify-content-center'\n    }\n  >\n    {props.characters.map((a, i) => <Character name={a} key={i} clickEvent={props.clickEvent} />)}\n  </div>\n);\n\nexport default Container;","import React from 'react';\nimport './Banner.css';\n\nconst Banner = () => (\n    <div className=\"banner\">\n        <div class=\"jumbotron jumbotron-fluid\">\n        <div class=\"container\">\n        <h1 class=\"display-4\">Rick and Morty Memory Game</h1>\n        <p class=\"lead\">Instructions: Click on a Rick and Morty character once. Remember who you clicked because if you click on them more than once, you'll lose!</p>\n  </div>\n</div>\n  </div>\n);\n\nexport default Banner;","import beth from './images/beth.png';\nimport birdperson from './images/birdperson.png';\nimport evilmorty from './images/evilmorty.png';\nimport gianthead from './images/gianthead.png';\nimport goldenford from './images/goldenford.png';\nimport jerry from './images/jerry.png';\nimport jessica from './images/jessica.png';\nimport meeseeks from './images/meeseeks.png';\nimport morty from './images/morty.png';\nimport mr from './images/mr.png';\nimport rick from './images/rick.png';\nimport summer from './images/summer.png';\n\nconst images = [\n  beth,\n  birdperson,\n  evilmorty,\n  gianthead,\n  goldenford,\n  jerry,\n  jessica,\n  meeseeks,\n  morty,\n  mr,\n  rick,\n  summer\n];\n\nexport default images;","import React, { Component } from 'react';\nimport Navbar from './Navbar';\nimport Container from './Container';\nimport Banner from './Banner';\nimport images from '../images';\n\nclass Game extends Component {\n    state = {\n        score: 0,\n        highScore: 0,\n\n        //here stores the class value to be assigned based on a good or bad click\n        navMsgColor: '',\n\n        //this contains intro, success, and failure messages\n        navMessage: 'Start Clicking!',\n\n        //this contains an array of image urls\n        allCharacters: this.shuffleArray(),\n\n        //this will track each clicked element\n        wasClicked: [],\n\n        //shakes the container on an incorrect guess if set to true\n        shake: false\n    };\n\n    //binds the current this context to checkClicked to have access to the current state\n    //when passed down to the Character component\n    clickEvent = this.checkClicked.bind(this);\n\n    //used to shuffle the array of images when the DOM loads, and when an image is clicked\n    shuffleArray(){\n        //creates a copy of the current characters array to modify if by value, and not by reference\n        const newArr = images.slice();\n\n        //will store the shuffled array\n        const shuffleArr = [];\n\n          // each loop through an index gets spliced from newArr, reducing its length\n    // gets a random index based off the current length of newArr\n    // splices the value from newArr, and pushes it to shuffleArr\n    while (newArr.length > 0) {\n        shuffleArr.push(newArr.splice(Math.floor(Math.random() * newArr.length), 1)[0]);\n      }\n      return shuffleArr;\n    }\n    checkClicked(clickedElem) {\n        // creates a copy of the wasClicked array to modify it by value, and not by reference. wasClicked stores all previous clicked images\n        const prevState = this.state.wasClicked.slice();\n    \n        // shuffles the images\n        const shuffled = this.shuffleArray();\n    \n        // tracks score\n        let score = this.state.score;\n        let highScore = this.state.highScore;\n    \n        // if the clicked item is not in wasClicked, then it hasn't been clicked and the score is increased\n        if (!this.state.wasClicked.includes(clickedElem)) {\n          // if score and highScore are the same, then there is a new highScore value\n          if (score === highScore) {\n            score++;\n            highScore++;\n    \n            // if they are not equal, then only increase the score value\n          } else {\n            score++;\n          }\n    \n          // adds the clicked item to wasClicked to track that it has been clicked\n          prevState.push(clickedElem);\n        }\n    \n        // resets the current score if the same element was clicked twice\n        if (this.state.wasClicked.includes(clickedElem)) {\n          let score = 0;\n          return this.setState({\n            score: score,\n            highScore: highScore,\n            navMsgColor: 'Incorrect',\n            navMessage: 'Incorrect guess!',\n            allCharacters: shuffled,\n            wasClicked: [],\n            shake: true\n          });\n        }\n    \n        // if this runs, then the same element has not been clicked twice and the score is increased\n        this.setState({\n          score: score,\n          highScore: highScore,\n          navMsgColor: 'correct',\n          navMessage: 'You Guessed Correctly!',\n          allCharacters: shuffled,\n          wasClicked: prevState,\n          shake: false\n        });\n    \n        // removes the green correct indicator on a successful click after .5s to re-render the class on each success\n        return setTimeout(() => this.setState({ navMsgColor: '' }), 500);\n      }\n    \n      // renders score to the navbar.\n      // passes the randomized state.allCharacters array to Container to create a Character component for each image.\n      // passes the this.checkClicked down to container to pass to each Character component to be used for the click event.\n      render() {\n        const state = this.state;\n        return (\n          <div>\n            <Navbar\n              score={state.score}\n              highScore={state.highScore}\n              navMessage={state.navMessage}\n              navMsgColor={state.navMsgColor}\n            />\n            <Banner />\n            <Container\n              shake={state.shake}\n              characters={state.allCharacters}\n              clickEvent={this.clickEvent}\n            />\n          </div>\n        );\n      }\n    }\n    \n    export default Game;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Game from './components/Game';\n\n\nReactDOM.render(<Game />, document.getElementById('root'));\n\n\n"],"sourceRoot":""}